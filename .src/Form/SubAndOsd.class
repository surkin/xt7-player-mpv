' Gambas class file

'Copyright (C) 2007, 2008 Antonio Orefice
' Gambas class file
Public AlreadyLoaded As Boolean = False 'true if the form loaded it's settings from disk at least one time


Public mplayer As New MplayerClass

Public Struct mpvOption
  name As String
  data As String
End Struct

Public Sub Init()
  Global.Center(Fmain, Me)
End


Private Function rgba2Habgr(RGBA As String) As String
  'will convert an hex in rrggbbaa format to an hex in Haabbggrr format
  'rrggbbAA"
  Dim habgr As String
  habgr = "H" & Mid(RGBA, 7, 2) & Mid(RGBA, 5, 2) & Mid(RGBA, 3, 2) & Mid(RGBA, 1, 2)
  Return habgr
End

Private Function o(name As String, data As String) As MpvOption
  Dim opt As New MpvOption
  opt.name = name
  opt.data = data
  Return opt
End


Public Function ParseSubGui(Optional fullpath As String = "") As MpvOption[]
'SSA related:
  Dim FontName As String = ",FontName=" "\"" & FontString.Font.name & "\""
  Dim subFontName As String
  Dim Outline As String = ",outline=" & OutlineSpinBox.value
  Dim Shadow As String = ",shadow=" & ShadowSpinBox.value
  Dim AssForceStyle As String = ""
  Dim opts As New MpvOption[]
  Dim opt As New MpvOption
  Dim margins As String

  If ASSDisableCHK.value Then
    opt.name = "sub-ass"
    opt.data = "no"
    opts.Push(opt)
  Endif

  'Set ass style; ass style will be used to override media embedded ass styles for ass subtitles
  'Set --sub-text-* options too; that will be used for non ass subtitles.

    If FontStyleCHK.value Then 
      AssForceStyle = AssForceStyle & FontName
      AssForceStyle = AssForceStyle & ",FontSize=" & CStr(FontString.Font.Size)
      'If FontString.Font.Bold Then AssForceStyle = AssForceStyle & ",Bold=1"
      If FontString.Font.Bold Then opts.push(o("sub-bold", "yes"))
      If FontString.Font.Italic Then AssForceStyle = AssForceStyle & ",Italic=1" 

      SubFontName = FontString.Font.name
      'If FontString.Font.Bold Then SubFontName &= ":style=bold" 'fixmempv: how to do italic and strikeout?
      opts.Push(o("sub-font", "\"" & SubFontName & "\""))
      opts.Push(o("sub-font-size", CStr(FontString.Font.size)))

    Endif

    If OutlineCHK.value Then
      AssForceStyle = AssForceStyle & Outline
      AssForceStyle = AssForceStyle & ",OutlineColour=" & rgba2Habgr(Hex(BorderColorBox.value, 6) & Hex(BorderColorSpinBox.value, 2))

      opts.Add(o("sub-border-size", OutLineSpinBox.value))
      opts.Add(o("sub-border-color", "#" & Hex(255 - BorderColorSpinBox.value, 2) & Hex(bordercolorBox.value, 6)))
    Endif

    'maybe redoundant with -ass-color and -ass-border-color, but do it anyway:
    If FontColorCHK.value Then 
      AssForceStyle = AssForceStyle & ",PrimaryColour=" & rgba2Habgr(Hex(FontColorBox.value, 6) & Hex(FontColorSpinBox.value, 2))
      opts.Add(o("sub-color", "#" & Hex(255 - FontColorSpinBox.value, 2) & Hex(FontColorBox.value, 6)))
    Endif
    
    If SHADOWCHK.value Then
      AssForceStyle = AssForceStyle & Shadow
      Assforcestyle = AssForceStyle & ",BackColour=" & rgba2Habgr(Hex(ShadowColorBTN.value, 6) & Hex(ShadowColorSpinBox.value, 2))
      
      opts.Add(o("sub-shadow-offset", ShadowSpinBox.value))
      opts.Add(o("sub-shadow-color", "#" & Hex(255 - ShadowColorSpinBox.value, 2) & Hex(ShadowColorBTN.value, 6)))
    Endif

    If MarginVCHK.value Then 
      AssForceStyle = AssForceStyle & ",MarginV=" & MarginVSpinBox.value
      opts.Add(o("subpos", MarginVSpinBox.value))
    Endif

    If Left(AssForceStyle) = "," Then Assforcestyle = Right(AssForceStyle, "-1")



  'osd related
  If FontStyleCHK2.value Then 
    SubFontName = FontString2.Font.name
    'If FontString2.Font.Bold Then SubFontName &= ":style=bold" 'fixmempv: how to do italic and strikeout?
    If FontString2.Font.Bold Then opts.push(o("osd-bold", "yes"))
    opts.Push(o("osd-font", "\"" & SubFontName & "\""))
    opts.Push(o("osd-font-size", CStr(FontString2.Font.size)))
  Endif
  
  If Fontcolorchk2.value Then opts.Add(o("osd-color", "#" & Hex(255 - FontColorSpinBox2.value, 2) & Hex(FontColorBox2.value, 6)))
  
  If outlinechk2.value Then
    opts.Add(o("osd-border-size", OutLineSpinBox2.value))
    opts.Add(o("osd-border-color", "#" & Hex(255 - BorderColorSpinBox2.value, 2) & Hex(bordercolorBox2.value, 6)))
  Endif

  If shadowchk2.value Then
    opts.Add(o("osd-shadow-offset", ShadowSpinBox2.value))
    opts.Add(o("osd-shadow-color", "#" & Hex(255 - ShadowColorSpinBox2.value, 2) & Hex(ShadowColorBTN2.value, 6)))
  Endif


 'push SSA options
  If Not ASSDisableCHK.value = True Then 'if the user has not disabled ass rendering,
    If assoverridechk.value = True Then 'if the user choose to override ass styles,
      opts.Add(o("sub-ass-force-style", AssForceStyle))
    Endif
  Endif
  

  
  Try opts.Add(o("sub-auto", Split(Combofuzziness.text, " ", "", True)[0]))
  
  If codepage_force_combobox.value = CheckBox.True Then 
      opts.Add(o("sub-codepage", "+" & ComboSubCp.text))
        Else
      opts.Add(o("sub-codepage", ComboSubCp.text))
  Endif

  If (fullpath <> "") Then
    If MkvWorkaroundCHK.value Then    'http://bugzilla.mplayerhq.hu/show_bug.cgi?id=1870
      If (Lower(file.Ext((fullpath))) = "mkv") Then
        opts.Add(o("sub-file", "'" & SConv(fullpath) & "'"))
        'opts.Add(o("sub-ass", "no")) 'deprecated, use the following instead:
              opts.Add(o("sub-ass-override", "strip"))
              opts.Add(o("embeddedfonts", "no"))
      Endif
    Endif
  Endif

  
  'sub margins
    margins = Trim(Split(SubMarginsCombobox.text, "-")[0])
    Select Case margins
      Case 1
        opts.Add(o("sub-use-margins", "yes"))
        opts.Add(o("sub-ass-force-margins", "no"))
      Case 2
        opts.Add(o("sub-ass-force-margins", "yes"))
        opts.Add(o("sub-use-margins", "no"))
      Case 3
        opts.Add(o("sub-use-margins", "yes"))
        opts.Add(o("sub-ass-force-margins", "yes"))
    End Select
  
  
  For Each opt In opts
    global.myDebug(opt.name & "=" & opt.data)
  Next

 Return opts
End





Public Sub TestBTN_Click()
  Dim AnImage As New Image
  Dim Filename As String
  Dim MyOptions, previewoptions As String
  Dim MySrtFile As File
  Dim screen_h As Integer = 720
  Dim opt As MpvOption
  Dim pScale As Float = 1
  'If (alreadyloaded And Me.visible) Then global.NotifyApplyNeeds()
  If SubAndOsd.visible Then 'we wanna preview only if the form is visible

    TestBTN.enabled = False
    ApplyBTN.enabled = False
    Me.mouse = Mouse.Wait
  
    TestBTN.background = Color.ButtonBackground
    AnImage.Resize(DrawingArea1.W, DrawingArea1.H)
    AnImage.Fill(Color.White)
    AnImage.save(global.confpath & "/SubBackImage01.png")
  
    AnImage.Fill(Color.Red)
    AnImage.save(global.confpath & "/SubBackImage02.png")
    
    AnImage.Fill(Color.Green)
    AnImage.save(global.confpath & "/SubBackImage03.png")
    
    AnImage.Fill(Color.Blue)
    AnImage.save(global.confpath & "/SubBackImage04.png")
    
    AnImage.Fill(Color.yellow)
    AnImage.save(global.confpath & "/SubBackImage05.png")
  
    AnImage.Fill(Color.Black)
    AnImage.save(global.confpath & "/SubBackImage06.png")

    AnImage.Fill(Color.Black)
    AnImage.save(global.confpath & "/SubBackImage07.png")

    FileName = Temp("SubSrt.srt")
    MySrtFile = Open Filename For Write Create
    Try Print #MySrtFile, "1"
    Try Print #MySrtFile, "00:00:00,000 --> 99:99:99,000"
    Try Print #MySrtFile, "The quick brown fox jumps over the lazy dog"
    Close #MySrtFile
    
    mplayer.do_stop()
    mplayer.clear_options() 
    mplayer.set_option("wid", DrawingArea1.Handle)
    mplayer.set_option("sub-file", Filename)
    mplayer.set_option("vo", "x11,gpu,xv,")
    mplayer.set_option("ao", Null)
    mplayer.set_option("vf-pre", "scale")
    mplayer.set_option("vf-add", "scale")
    mplayer.set_option("osd-level", "3")
    mplayer.set_option("mf-fps", "1")
    mplayer.set_option("mf-type", "png")
    mplayer.set_option("loop", "inf")
    mplayer.set_option("osc", "no")
 
    mplayer.set_option("osd-scale-by-window", "no")
    mplayer.set_option("sub-scale-by-window", "no")
    screen_h = FMain.Screenbypos(DrawingArea1.x + 1, DrawingArea1.x + 1).H
    pScale = screen_h / 720 * CFloat(pScaleFactorComboBox.text) * pScaleFactorComboBox.text

    mplayer.set_option("osd-scale", pScale)
    mplayer.set_option("sub-scale", pScale)
    mplayer.set_option("config", "no")
    'mplayer.set_option("zoom", "true") 'fixmempv, come si fa?

    For Each opt In ParseSubGui()
      mplayer.set_option(opt.name, opt.data)
    Next 'opt


    
    mplayer.do_play("mf://" & global.confpath & "/SubBackImage*.png", MyOptions & previewoptions)

    Me.mouse = Mouse.default
    TestBTN.enabled = True
    ApplyBTN.enabled = True
  Endif
End





Public Sub Form_Hide()
  mplayer.do_stop()
  If FMain.mplayer.ProcessRunningOvr() Then fmain.videoboxproxy.SetFocus()
End

Public Sub OkBTN_Click()
  Me.hide
  Wait 0.1
  If FMain.mplayer.ProcessRunningOvr() Then fmain.videoboxproxy.SetFocus()
End

Public Sub ApplyBTN_Click()
  FMain.Apply()
  TestBTN_Click()
  global.ResetApplyBtnColor()
End

Public Sub FirstLoadIfNeeded()
  If Not (alreadyloaded) Then 
    Alreadyloaded = True
    MenuLoadDefault_Click()
  Endif
End


Public Sub Form_Open()
  FirstLoadIfNeeded()
  If ((FontColorBox.color = Color.black) And (borderColorBox.color = Color.black) And (shadowColorbtn.color = Color.black)) Then FontColorBox.color = Color.white
  'ME.center
  Global.Center(Fmain, Me)
 
End

Public Sub FontChooseBTN_Click()
  If (alreadyloaded And Me.visible) Then global.NotifyApplyNeeds()
  myDialog.Font = FontString.font
  If Not (myDialog.SelectFont()) Then
    FontString.font = myDialog.font
    FontString.text = FontString.Font.name
    TestBTN.background = Color.Yellow
    TESTBTN_Click()
  Endif
End


Public Sub FontChooseBTN2_Click()
  If (alreadyloaded And Me.visible) Then global.NotifyApplyNeeds()
  myDialog.Font = FontString2.font
  If Not (myDialog.SelectFont()) Then
    FontString2.font = myDialog.font
    FontString2.text = FontString2.Font.name
    TestBTN.background = Color.Yellow
    TESTBTN_Click()
  Endif
End




Public Sub Form_Show()
Stop
    myDialog.Font = FontString.font
    'FontString.font = myDialog.font
    FontString.text = FontString.Font.name
    FontString2.text = FontString2.Font.name
    TestBTN_Click()
End

Public Sub MenuLoadDefault_Click()
  Dim MySettings As New SettingsClass
  MySettings.Load(Me, global.confpath & "/" & global.CurrentProfile)
  Alreadyloaded = True
  'FMain.cachedopts = "" 'fixmempv se vuoi reimplementare le cachedopts
End

Public Sub MenuSaveDefault_Click()
  SaveCurrent()
End
Public Sub SaveBTN_Click()
  SaveCurrent()
End
Public Sub SaveCurrent()
  Dim MySettings As New SettingsClass
  MySettings.Save(Me, global.confpath & "/" & global.CurrentProfile)
End


Public Sub MenuSaveToAll_Click()
  Dim profilename, profilenamesplitted As String
  Dim MySettings As New SettingsClass
  If MyQuestion.Ask(("This will save this window settings\n to all profiles found but the 'Factory_defaults' one"), ("Proceed"), ("Don't")) = 2 Then
    Return
      Else
     For Each profilename In Dir(global.confpath & "/", "*.profile")
        If Stat(global.confpath & "/" & profilename, True).type = gb.Directory Then
          profilenamesplitted = Split(profilename, ".")[0]
          If profilenamesplitted <> "Factory_Defaults" Then
            MySettings.Save(Me, global.confpath & "/" & profilenamesplitted)
          Endif
        Endif
     Next 'profilename
  Endif
End


Public Sub OSDWhiteHBox_MouseDown()

End

Public Sub ASSDisableCHK_Click()
  'Disable ass related options:
  Dim EnableSSA As Boolean = Not ASSDisableCHK.value
  ' FontChooseHBox2.Enabled = EnableSSA
  ' FontColorHBOX.Enabled = EnableSSA


  AlignmentHBox.Enabled = EnableSSA
  TestBTN.background = Color.Yellow
  If (alreadyloaded And Me.visible) Then global.NotifyApplyNeeds()
End


Public Sub Form_Close()
  mplayer.do_stop()
  Try Kill global.confpath & "/SubBackImage01.png"
  Try Kill global.confpath & "/SubBackImage02.png"
  Try Kill global.confpath & "/SubBackImage03.png"
  Try Kill global.confpath & "/SubBackImage04.png"
  Try Kill global.confpath & "/SubBackImage05.png"
  If FMain.mplayer.ProcessRunningOvr() Then fmain.videoboxproxy.SetFocus()
End



Public Sub PreviewDriverCombobox_Click()
    TestBTN_Click()
End

Public Sub notifytest_Click()
  If (alreadyloaded And Me.visible) Then global.NotifyApplyNeeds()
  TestBTN_Click()
End

Public Sub notifytest_Change()
  If (alreadyloaded And Me.visible) Then global.NotifyApplyNeeds()
  TestBTN_Click()
End
Public Sub notify_Click()
  If (alreadyloaded And Me.visible) Then global.NotifyApplyNeeds()
  TestBTN.background = Color.Yellow
End

Public Sub notify_Change()
  TestBTN.background = Color.Yellow
  If (alreadyloaded And Me.visible) Then global.NotifyApplyNeeds()
End

Public Sub pScaleFactorComboBox_Change()

End

Public Sub pScaleFactorComboBox_Click()
  TestBTN_Click()
End


Public Sub notifytest_Arrange()

  panelsubtitles.h = hbox1.y + hbox1.h + Desktop.scale * 2

End


