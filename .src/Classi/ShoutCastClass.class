' Gambas class file

 
'Public Ts As String = ""
Public channelinfo As String
Public items As New String[]
Public Alternate As Boolean = False
Public MAXRESULTS As Integer = 1000



Public Sub Alternatecolor(myplaylist As GridView)
 Dim r, c As Integer
 Alternate = True
     For r = 0 To myplaylist.Rows.count - 1
       If Not Alternate Then
         For c = 0 To MyPlaylist.Columns.count - 1
           MyPlaylist[r, c].text = MyPlaylist[r, c].text
           MyPlaylist[r, c].background = Global.Alternatecolor
         Next 'c
           Else
         For c = 0 To MyPlaylist.Columns.count - 1
           MyPlaylist[r, c].text = MyPlaylist[r, c].text
           ' [GB2:BCOL] MyPlaylist[r, c].background = MyPlaylist.background
           MyPlaylist[r, c].background = MyPlaylist.Background
         Next 'c
       Endif
       Alternate = Not (alternate)
   Next 'r

End

Private CachedGenres As New String[]

Private Sub GetGenresFromCache(GenresTree As Treeview)
  Dim genre, mylink, item As String
  genrestree.clear
  For Each item In cachedgenres
    Try genre = Split(item, Chr(0))[0]
    Try MyLink = Split(item, Chr(0))[1]
    Try genrestree.Add(mylink, genre, stock["small/directory"])
  Next
End


Public Function GetGenres(GenresTree As TreeView, Optional usecache As Boolean = True)
  'Enum shoucast genres and fill a treeview in the format
  Dim i As Integer
  Dim buffer, GenreName, description, numstations, mylink As String


  Dim lines As New String[]
  'DIM AskUrl AS String = "http://yp.shoutcast.com/sbin/newxml.phtml?rss=1"
  Dim AskUrl As String = "'http://api.shoutcast.com/legacy/genrelist?k=sh17tOUi_ezL61_A&rss=1'"
  Dim tmpfile As String = Temp()
  Dim wget As New Wgetclass

  If usecache Then 
    GetGenresFromCache(GenresTree)
    Return
  Endif
  

  tmpfile = wget.DownloadAsync(AskUrl, True)

  Shell "grep -i 'title\\|description\\|link' " & tmpfile & "| sed 's/<\\/[^>]*>/&\\n/g'" To buffer
  buffer = Replace(buffer, "<item>", "<item>\n")
  
  
  'SHELL "grep -i 'title\\|description\\|link' /tmp/xml.xml" TO buffer
  Lines = Split(buffer, "\n", "", True) '<<-- non ci sono piÃ¹ i \n,
                              'forse conviene aggiungerli a mano dopo qualsiasi tag del genere "</*>"
                              'per esempio, t"</title>" diventa "</title>\n"
                              'nel caso tornassero i "\n", se ne avrebbero allora due di seguito,
                              'in quel caso basta ignorare i void tramite la funzione "split" di gambas
  'find where to begin parsing stations (triple in order title,description,link)
  i = 0
  
  GenresTree.clear
  CachedGenres.clear
  Repeat
    For i = i To lines.Count - 3
      If (lines[i] Like "*<title>*") And (lines[i + 1] Like "<description>*") And (lines[i + 2] Like "<link>*") Then
        Break
      Endif
    Next 'i
    If i + 2 = lines.count Then Break
  'begin parsing
    
    Genrename = Split(lines[i], ">")[1]
    Genrename = Split(GenreName, "<")[0]
    'GenreName = Mid(lines[i], Len("<title>") + 1, Len(lines[i]) - (Len("<title>") + 1) * 2)
    i = i + 1
    'description = Mid(lines[i], Len("<description>") + 1, Len(lines[i]) - (Len("<description>") + 1) * 2)
    Description = Split(lines[i], ">")[1]
    Description = Split(Description, "<")[0]
    numstations = Trim(Split(description, ":")[1])
    i = i + 1
    myLINK = Mid(lines[i], Len("<link>") + 1, Len(lines[i]) - (Len("<link>") + 1) * 2)
    i = i + 1
    'GenresTree.Add(MyLink, GenreName & ts & " - [" & numstations & "]", picture["shoutcast16.png"])
    Try GenresTree.Add(MyLink, GenreName, stock["small/directory"]) 'picture["shoutcast16.png"])
    CachedGenres.Add(GenreName & Chr(0) & MyLink)
    Until (i + 3) >= lines.count
End



Public Function GetStationsFromSearch(SearchTerm As String, ShutResultGrid As Gridview) As Boolean
  Dim AskUrl As String
  Dim i As Integer
  Dim MyError As Boolean
  SearchTerm = Global.urlencode(searchterm)
  'AskUrl = "http://yp.shoutcast.com/sbin/newxml.phtml?search='" & SearchTerm & "'" & "&limit=" & MAXRESULTS
  AskUrl = "'http://api.shoutcast.com/legacy/stationsearch?k=sh17tOUi_ezL61_A&search=" & SearchTerm & "&limit=" & MAXRESULTS & "'"
  'http://api.shoutcast.com/legacy/stationsearch?k=[Your Dev ID]&search=ambient+beats
  MyError = DownloadAndParse(AskUrl, Null, ShutResultGrid) = ""
  For i = 0 To 3
    Try ShutResultGrid.Columns[0].w = -1
  Next 'i
  Return MyError
End


Public Function GetStationsFromGenre(Genre As String, GenresTree As Treeview)
   'http://yp.shoutcast.com/sbin/newxml.phtml?genre=Trance
   'remove all child items
  'DIM AskUrl AS String = "http://yp.shoutcast.com/sbin/newxml.phtml?genre=" & Genre '& "&rss=1"
  Dim AskUrl As String = "'http://api.shoutcast.com/legacy/genresearch?k=sh17tOUi_ezL61_A&genre=" & Genre & "'"
  Repeat
    GenresTree.MoveTo(Genre)
    GenresTree.MoveChild()
    Try GenresTree.Item.Delete
  Until Error
  DownloadAndParse(AskUrl, GenresTree)
End


Private Function DownloadAndParse(AskUrl As String, Optional GenresTree As Treeview = Null, Optional ShutResultGrid As Gridview = Null) As String
  Dim buffer As String
  Dim wget As New Wgetclass
  'ts = Chr(0)
  channelinfo = ""
  'SHELL "wget '" & AskUrl & "' --timeout=4 --tries=3 --output-document=" & tmpfile WAIT
  'TRY buffer = File.Load(tmpfile)
  buffer = wget.DownloadAsync(AskUrl)
  If Error Then Return ""
   If Trim(buffer) = "" Then Return ""
    If Error Then Return ""
     items.clear
   If (GenresTree <> Null) Then
      parsechannel(buffer, GenresTree, Null)
    Else If (ShutResultGrid <> Null) Then
      ShutResultGrid.enabled = False
      ShutResultGrid.Columns.count = 4
      ShutResultGrid.rows.count = MAXRESULTS 'max results to show ?
      ShutResultGrid.Header = GridView.Horizontal
      ShutResultGrid.Columns[0].text = ("Name")
      ShutResultGrid.Columns[1].text = ("Media Type")
      ShutResultGrid.Columns[2].text = ("BitRate")
      ShutResultGrid.Columns[3].text = ("Link")
      parsechannel(buffer, Null, ShutResultGrid)
      Alternatecolor(ShutResultGrid)
      ShutResultGrid.enabled = True
   Endif
   Return "OK"
End


Static Public Function MidC(s As String, a As String, Optional b As String) As String
  'return the first occurrence of the string between a and b
  'if b is omitted then all the string starting from a is returned
  Dim mmid As String
  mMid = Mid(s, InStr(s, a) + Len(a))
  If b <> "" Then 
    Return Left(mmid, InStr(mmid, b) - 1)
      Else
    Return mMid
  Endif
End

Private Sub ParseChannel(xmlbuffer As String, Optional GenresTree As Treeview = Null, Optional ShutResultGrid As Gridview = Null)
  Dim title, br, mt, id, MyLink As String = ""
  Dim tunein_base As String = ""
  Dim aline As String
  Dim LastRow As Integer = 0
  Dim feed As String[]
  Try feed = Split(xmlbuffer, "<", "", True)
  If feed.count = 0 Then 
    Message.Error(("Could not parse the feed"))
    Return
  Endif
   'Parse the feed, simple way ahead...
  For Each aLine In feed
    Select Case aline
      Case Like "tunein base=*"
         tunein_base = MidC(aline, "tunein base=\"", "\"")
      Case Like "station name=*"

        title = MidC(aline, "name=\"", "\"")
        mt = MidC(aline, "mt=\"", "\"")
        id = MidC(aline, "id=\"", "\"")
        br = MidC(aline, "br=\"", "\"")
        If ((id <> "") And (title <> "")) Then
          MyLink = "http://yp.shoutcast.com/" & tunein_base & "?id=" & id
          If (GenresTree <> Null) Then

            Try GenresTree.add(MyLink, title & " " & " Type: " & mt & " " & " Bitrate: " & br, stock["small/audio"], GenresTree.Current.key)
              Else
            If (ShutResultGrid <> Null) Then
              'ShutResultGrid.Rows.count = ShutResultGrid.Rows.count + 1
              'LastRow = ShutResultGrid.Rows.count - 1
              If Lastrow < ShutResultGrid.Rows.count Then
                ShutResultGrid[LastRow, 0].Picture = picture["filetypeuri.png"]
                ShutResultGrid[LastRow, 0].text = title
                ShutResultGrid[LastRow, 1].text = mt
                ShutResultGrid[LastRow, 2].text = br
                ShutResultGrid[LastRow, 3].text = MyLink
                LastRow = LastRow + 1
              Endif
            Endif
          Endif
        Endif
        id = ""
        title = ""        
        mt = ""
        br = ""
        mylink = ""
    End Select
  Next 'aline
  Try ShutResultGrid.rows.count = lastrow
End



Private Sub ParseChannelOLD(Rootnode As XmlNode, Optional GenresTree As Treeview = Null, Optional ShutResultGrid As Gridview = Null)
  'returns podcast title,link,description,icon
  Dim t, j As Integer
  Dim title, br, mt, id, MyLink As String = ""
  Dim channelfound As Boolean = False
  Dim LastRow As Integer = 0
  Dim tunein_base As String = ""
  Dim TuneinAttribute As XmlNode
  Dim StationAttribute As XmlNode
  'find channel
  
  For t = 0 To Rootnode.Children.Count - 1
    If Rootnode.Children[t].name = "tunein" Then
      For Each TuneinAttribute In Rootnode.Children[t].Attributes
        If TuneinAttribute.name = "base" Then tunein_base = TuneinAttribute.value
      Next 'TuneinAttribute
      channelfound = True
      Break
    Endif
  Next 't

  If channelfound Then
         'find stations
         For j = j To RootNode.Children.Count - 1
               If RootNode.Children[j].name = "station" Then
                   'station found
                   For Each StationAttribute In Rootnode.Children[j].Attributes
                     If StationAttribute.name = "name" Then
                         title = Replace(StationAttribute.value, "&amp;", "&")
                       Else If StationAttribute.name = "mt" Then
                         mt = Replace(StationAttribute.value, "&amp;", "&")
                       Else If StationAttribute.name = "id" Then
                         id = Replace(StationAttribute.value, "&amp;", "&")
                       Else If StationAttribute.name = "br" Then
                         br = Replace(StationAttribute.value, "&amp;", "&")
                     Endif
                   Next 'attribute
                   If ((id <> "") And (title <> "")) Then
                      MyLink = "http://yp.shoutcast.com/" & tunein_base & "?id=" & id
                      If (GenresTree <> Null) Then
                        Try GenresTree.add(MyLink, title & " " & " Type: " & mt & " " & " Bitrate: " & br, picture["filetypeuri.png"], GenresTree.Current.key)
                          Else
                        If (ShutResultGrid <> Null) Then
                          'ShutResultGrid.Rows.count = ShutResultGrid.Rows.count + 1
                          'LastRow = ShutResultGrid.Rows.count - 1
                          If Lastrow < ShutResultGrid.Rows.count Then
                            ShutResultGrid[LastRow, 0].Picture = picture["filetypeuri.png"]
                            ShutResultGrid[LastRow, 0].text = title
                            ShutResultGrid[LastRow, 1].text = mt
                            ShutResultGrid[LastRow, 2].text = br
                            ShutResultGrid[LastRow, 3].text = MyLink
                            LastRow = LastRow + 1
                          Endif
                        Endif
                      Endif
                      id = ""
                      title = ""
                   Endif
              Endif
        Next 'j
  Endif
  Try ShutResultGrid.rows.count = lastrow
End



Public Sub Select_NextTreeItem(MyTree As Treeview)
  MyTree.movecurrent
  Try MyTree.MoveBelow()
  If Not Error Then
    Try MyTree.Item.selected = True
  Endif
  Wait 0.1 'needed for grid select event to fill new mplayer.media_fullpath,maybe tunable
End

Public Sub Select_PrevTreeItem(MyTree As Treeview)
  MyTree.movecurrent
  Try MyTree.MoveAbove
  If Not Error Then
    Try MyTree.Item.selected = True
  Endif
  Wait 0.1 'needed for grid select event to fill new mplayer.media_fullpath,maybe tunable
End

Public Sub Select_PrevGridItem(mygrid As Gridview)
  mygrid.rows[mygrid.row].Selected = False
  If mygrid.row = 0 Then
    mygrid.row = mygrid.Rows.count - 1
      Else
    MyGrid.row = mygrid.row - 1
  Endif
  mygrid.rows[mygrid.row].Selected = True
  Wait 0.1 'needed for grid select event to fill new mplayer.media_fullpath,maybe tunable
End

Public Sub Select_NextGridItem(mygrid As Gridview)
  mygrid.rows[mygrid.row].Selected = False
  If mygrid.row = mygrid.Rows.count - 1 Then
    mygrid.row = 0
      Else
    MyGrid.row = mygrid.row + 1
  Endif
  mygrid.rows[mygrid.row].Selected = True
  Wait 0.1 'needed for grid select event to fill new mplayer.media_fullpath,maybe tunable
End




