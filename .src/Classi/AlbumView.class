' Gambas class file

'Public mycolumnview As Columnview

Public ts As String
Private localtable As New String[]
Private localplaylist As Playlistclass
Private iconsize As Integer = 64
Private columnwidth As Integer = 128
Private view As Gridview
Private paddingfactor As Float = 1.2

Public Sub DoSortTable(Field As String)
  Dim i As Integer
  Dim Startpos, MidPos, EndPos As Integer
  Dim MyValue As String

  For i = 0 To localtable.count - 1
    StartPos = InStr(localtable[i], ts & Field)
    MidPos = InStr(localtable[i], ts, StartPos + 1)
    EndPos = InStr(localtable[i], ts, Midpos + 1)
    MyValue = Mid(localtable[i], Startpos, Endpos - startpos)
    localtable[i] = Replace(localtable[i], MyValue, "")
    localtable[i] = MyValue & localtable[i]
  Next 'i

  'If Ascendent Then
    ' [GB2:TEXT] ptable = ptable.Sort(gb.Ascent + gb.text)
    localtable = localtable.Sort(gb.Ascent + gb.IgnoreCase)
  '    Else
    ' [GB2:TEXT] Ptable = ptable.Sort(gb.Descent + gb.text)
   ' localtable = localtable.Sort(gb.Descent + gb.IgnoreCase)
  'Endif
  'Ascendent = Not Ascendent
  '"public" the last sorted field
  ''LastSortedField = field
End
' 
  ' 
  ' Columnindex["Filename"] = 0
  ' Columnindex["Length"] = 1
  ' Columnindex["Artist"] = 2
  ' Columnindex["Album"] = 3
  ' Columnindex["Year"] = 4
  ' Columnindex["Track"] = 5
  ' Columnindex["Title"] = 6
  ' Columnindex["Genre"] = 7
  ' Columnindex["Comment"] = 8
  ' Columnindex["Type"] = 9
  ' Columnindex["Audio Codec"] = 10
  ' Columnindex["Audio Bitrate"] = 11
  ' Columnindex["Audio Rate"] = 12
  ' Columnindex["Channels"] = 13
  ' Columnindex["Video Codec"] = 14
  ' Columnindex["Video Bitrate"] = 15
  ' Columnindex["Fps"] = 16
  ' Columnindex["Width"] = 17
  ' Columnindex["Height"] = 18
  ' Columnindex["Full Path"] = 19
  ' Columnindex["File Size"] = 20
  ' Columnindex["Added on"] = 21

Public Function Init(playlist As Playlistclass, theview As Gridview, Optional filters As String = "*")
  Dim i As Integer
  Dim album, nextalbum As String
  Dim path As String
  Dim artist As String
  Dim filter As String
  Dim matchfilter As Boolean = False
  Dim numtracks As Integer = 1
  
  view = theview
  view.clear
  localplaylist = playlist
  ts = localplaylist.TableSeparator

  Try localtable = localplaylist.PTable.Copy()
  If Error Then Return

  'strip out non audio files
  For i = (localtable.count - 1) DownTo 0
    path = localplaylist.GetValue(localtable[i], "Full Path")
    If Not (Global.IsAudioFile(path)) Then 
      localtable.Remove(i)
    Endif
  Next 'i

  'remove duplicates album
  DoSortTable("Album")
  i = localtable.count - 1
  If localtable.count > 1 Then
    numtracks = 1
    Repeat 'remove duplicate albums
      album = Trim(localplaylist.GetValue(localtable[i], "Album"))
      If album = "" Then album = ("Unknown")
      nextalbum = Trim(localplaylist.GetValue(localtable[i - 1], "Album"))
      If nextalbum = "" Then nextalbum = ("Unknown")
      If Lower(Trim(album)) = Lower(Trim(nextalbum)) Then 
        localtable.Remove(i - 1) ' + 1)
        numtracks += 1
          Else
        If numtracks = 1 Then 
          Global.myDebug(album, " has just one track", " removing it from the albumview list")
          localtable.Remove(i)
        Endif
        numtracks = 1
      Endif
      i = i - 1
    Until (i <= 1)
  Endif

  'filter the results
  If Trim(filters) <> "" Then
    For i = (localtable.count - 1) DownTo 0
      album = Trim(localplaylist.GetValue(localtable[i], "Album"))
      artist = Trim(localplaylist.GetValue(localtable[i], "Artist"))
      matchfilter = False
      For Each filter In Split(filters, "|", "", True)
        If ((Lower(album) Like "*" & Lower(filter) & "*")) Or ((Lower(artist) Like "*" & Lower(filter) & "*")) Then matchfilter = True
      Next 'filter
      If Not matchfilter Then 
        localtable.Remove(i)
      Endif
    Next 'i
  Endif






  'we want this sorting: Artist->album date
  DoSortTable("Album")
  DoSortTable("Year")
  DoSortTable("Artist")
End


Public Sub Arrange(Optional rowsize As Integer = 96, Optional albumtext As Integer = 40)
  Dim maxcols, maxrows As Integer
  Dim th As Integer
  If localtable.count = 0 Then Return
  
  th = (view.Font.TextHeight("X") * 2)
  If rowsize < (th + (th Div 10)) Then rowsize = (th + (th Div 10)) 
  iconsize = rowsize
  columnwidth = rowsize + (view.Font.TextWidth("X") * albumtext)
  
  maxcols = view.clientw Div columnwidth
  If maxcols > localtable.count Then maxcols = localtable.count
  
  If maxcols = 0 Then maxcols = 1
  maxrows = (localtable.count Div maxcols)
  If (localtable.count Mod maxcols) <> 0 Then Inc maxrows
  
  view.Rows.count = 0
  view.columns.count = 0
  
  view.Columns.count = maxcols
  view.Rows.Count = maxrows
  view.Columns.Width = view.clientw Div view.Columns.count 'columnwidth 
  view.Rows.Height = iconsize * paddingfactor
  
  selectcell(-1, -1) 'unselect previous

End

Public Function AlbumToolTip(album As String) As String
  Dim i As Integer
  Dim outmsg As String
  Dim row As String
  Dim p As PlaylistClass = localplaylist
  Dim tracks As New String[]
  Dim TrackNo As String
  Dim SongName As String
  Dim tline As String
  Dim track As String
  
  For i = 0 To (p.PTable.count - 1)
    row = p.PTable[i]
    If Trim(Lower(p.GetValue(row, "Album"))) = Trim(Lower(album)) Then
      SongName = p.GetValue(row, "Title")
      If Trim(songname) <> "" Then 
        TrackNo = p.GetValue(row, "Track")
        If Len(trackNo) = 1 Then Trackno = "0" & Trackno
        If Trim(trackno) <> "" Then trackno &= " - "
        tline = TrackNo & SongName 
          Else 'use filename
        tline = File.Name(p.GetValue(row, "Full Path"))
      Endif
      tracks.add(tline)
    Endif
  Next
  tracks.sort()
  
  If tracks.count > 50 Then
    outmsg = ("more than 50 tracks!")
    Return outmsg
  Endif
  
  
  outmsg = Album & ":\n"
  For Each track In tracks
    outmsg &= "   " & track & "\n"
  Next
  outmsg = Left(outmsg, Len(outmsg) - 1)
  Return outmsg
End


Public Function GetTracks(r As Integer, c As Integer) As String[]
  Dim i As Integer
  Dim album As String
  Dim row As String 
  Dim paths As New String[]
  Dim p As Playlistclass = localplaylist
  Dim TrackNo As String
  Dim path As String
  
  album = AlbumFromCoordinates(r, c)
  For i = 0 To (p.PTable.count - 1)
    row = p.PTable[i]
    path = p.GetValue(row, "Full Path")
    If Global.IsAudioFile(path) Then
      If Trim(Lower(p.GetValue(row, "Album"))) = Trim(Lower(album)) Then
        TrackNo = p.GetValue(row, "Track")
        paths.Add(TrackNo & ts & path)
      Endif
    Endif
  Next
  paths.Sort
  
  For i = 0 To paths.count - 1
    paths[i] = Split(paths[i], ts, "", False)[1]
  Next
  Return paths
End



Public Sub data(r As Integer, c As Integer)
  Dim i As Integer
  Dim album, artist, coverfile, MyYear, path As String
  If view.Data.text <> "" Then Return
  i = (view.columns.count * r) + c
  'album and artist are inverted because array is sorted by artist
  album = ("Unknown")
  Try album = Trim(localplaylist.GetValue(localtable[i], "Album")) 'GetArtist(albums[i]) 
  If Error Then
    view.data.Background = GeneralOptions.backcolorChooseBTN1.Background
    view.data.Foreground = GeneralOptions.ColorChooseBTN1.Background
    Return
  Endif
  'If album <> "" Then
    artist = localplaylist.GetValue(localtable[i], "Artist") 'GetAlbum(albums[i])
    path = localplaylist.GetValue(localtable[i], "Full Path") 'GetPath(albums[i])
    MyYear = localplaylist.GetValue(localtable[i], "Year") 
    If Trim(MyYear) = "" Then MyYear = ("Unknown Year")
    MyYear = " (" & MyYear & ")"
      'Else
    
  'Endif
  coverfile = CoverManager.Coverfile(artist, album, path)

  If Not Exist(coverfile, True) 'se il coverfile non esiste
    If CoverManager.IsUncovered(path) Then '...e non può essesere creato/caricato
      view.Data.Picture = CoverManager.coverpicture(coverfile, path, iconsize) 'ritorna quello di default
        Else
      CoverManager.QueueThumb(view, path, artist, album, r, iconsize, c) 'prova a crearlo

    Endif
      Else ' il coverfile c'è
    view.Data.Picture = CoverManager.coverpicture(coverfile, path, iconsize)
  Endif
  view.Data.text = artist & "\n" & album & MyYear
  view.Data.Background = GeneralOptions.backcolorChooseBTN1.Background
  view.Data.Foreground = GeneralOptions.ColorChooseBTN1.Background
End

Private previousrow As Integer = -1
Private previouscol As Integer = -1

Public Sub selectcell(r As Integer, c As Integer)
  Dim savetext As String
  Dim savepic As Picture
  Dim selectionbox As New Image
  Dim imax As Integer
  Dim reduce As Float = 0.95
  Dim ox, oy As Integer
  Dim selectioncolor As Integer
  Dim tmpsat As Integer
  Try unzoompic(r, c)
  If (previousrow <> -1) And (previouscol <> -1) Then
     Try view[previousrow, previouscol].Background = GeneralOptions.BackColorChooseBTN1.Background ' Color.default
     Try view[previousrow, previouscol].Foreground = GeneralOptions.ColorChooseBTN1.Background 'Color.default
     Try view[previousrow, previouscol].text = ""
     Try view[previousrow, previouscol].clear
  Endif

  If r = -1 Then Return 'argoument = -1 means to just deselect previous.

  savetext = view[r, c].text
  savepic = view[r, c].picture

  Try imax = Max(savepic.Image.w, savepic.Image.h)
  If Error Then Return
  Try savepic = savepic.Image.Stretch(savepic.Image.w * reduce, savepic.Image.h * reduce).picture
  If Error Then Return
  'savepic = savepic.Image.PaintRect(0, 0, 400, 400, Color.SetAlpha(Color.blue, 220)).picture
  'savepic = savepic.Image.paintImage(picture["selectionbox.png"].Image, 0, 0, iconsize, iconsize).picture
  'tmpimg = savepic.Image.Copy()
  
  ox = CInt(savepic.Image.w - (savepic.Image.w * reduce)) 
  oy = CInt(savepic.Image.h - (savepic.Image.h * reduce))
  ox = ox - CInt(savepic.Image.w Div 50)
  oy = oy - CInt(savepic.Image.h Div 50)
 
  tmpsat = Color[Color.LightBackground].Saturation
  tmpsat = CInt(tmpsat * 2)
  selectioncolor = Color.SetHSV(Color.LightBackground,, tmpsat)
  
  selectionbox = selectionbox.Load("selectionbox.png").Stretch(imax, imax).Colorize(selectioncolor)
  selectionbox.PaintImage(savepic.Image, ox, oy) ', 30, 30)

  savepic = selectionbox.Picture

  view[r, c].picture = savepic
  view[r, c].text = savetext
  view[r, c].RichText = "<b>" & Replace(savetext, "\n", "<br>") 
  view[r, c].Font.bold = True
  view[r, c].background = GeneralOptions.BackColorChooseBTN1.Background ' Color.default
  view[r, c].Foreground = GeneralOptions.ColorChooseBTN1.Background 'Color.default
  
  previousrow = r
  previouscol = c
End


Private pr As Integer = -1
Private pc As Integer = -1

Public Sub highlighter(mousex As Integer, mousey As Integer)
  Dim r, c As Integer
  Try r = Global.MyRowAt(view, mouse.screeny - view.screeny)
  If Error Then Return
  If r = -1 Then Return
  Try c = view.ColumnAt(mouse.screenx - view.screenx)
  If Error Then Return
  If c = -1 Then Return
  
  If ((pr <> r) Or (pc <> c)) Then
    Try unzoompic(pr, pc)
    Try zoompic(r, c)
  Endif
  pr = r
  pc = c
  view[r, c].Background = GeneralOptions.backcolorChooseBTN1.Background
  view[r, c].Foreground = GeneralOptions.ColorChooseBTN1.Background
End


Public Sub zoompic(r As Integer, c As Integer)
  Dim nw, nh As Integer
  Dim savetext As String


  nw = CInt(view[r, c].Picture.w * 1.1)
  nh = CInt(view[r, c].Picture.h * 1.1)
  Try savetext = view[r, c].text 
  view[r, c].Picture = view[r, c].Picture.Image.stretch(nw, nh).Picture
    view[r, c].RichText = "<b>" & Replace(savetext, "\n", "<br>") 
  'view[r, c].text = savetext
End

Public Sub unzoompic(r As Integer, c As Integer)
  view[r, c].text = ""
  view[r, c].clear
End



Public Function PathFromCoordinates(r As String, c As String) As String
  Try Return localplaylist.GetValue(localtable[(r * view.columns.count) + c], "Full Path")
End

Public Function AlbumFromCoordinates(r As String, c As String) As String
  Try Return localplaylist.GetValue(localtable[(r * view.columns.count) + c], "Album")
End

Public Function ArtistFromCoordinates(r As String, c As String) As String
  Try Return localplaylist.GetValue(localtable[(r * view.columns.count) + c], "Artist")
End

