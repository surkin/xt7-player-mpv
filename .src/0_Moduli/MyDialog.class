' Gambas class file

Export
Create Static

Public color As Integer = Dialog.color
Public filter As String[] = Dialog.filter
Public font As Font = Dialog.font
Public path As String = Dialog.path
Public paths As String[] = Dialog.paths
Public showhidden As Boolean = Dialog.showhidden
Public title As String = Dialog.title
'Public autoext As Boolean = Dialog.autoext
'Public mydate As Date = Dialog.date

Private Sub sync()
  color = Dialog.color
  filter = Dialog.filter
  font = Dialog.font
  path = Dialog.path
  paths = Dialog.paths
  showhidden = Dialog.showhidden
  title = Dialog.title
  'autoext = Dialog.autoext
  'myDate = Dialog.date
End

Private Sub Getsync()
  'Try Dialog.date = mydate
  Try Dialog.font = font
  Try Dialog.color = color
  Try Dialog.filter = filter
  Try Dialog.path = path
  Try Dialog.paths = paths
  Try Dialog.showhidden = showhidden
  Try Dialog.title = title
'  Try Dialog.autoext = autoext
End

Public Function SelectColor() As Boolean
  Dim ret As Boolean
  Getsync()
  Try ret = Dialog.SelectColor()
  If Error Then Try ret = Dialog.SelectColor()
  If Error Then Try ret = Dialog.SelectColor()
  sync()
  Return ret
End
Public Function SelectFont() As Boolean
  Dim ret As Boolean
  Getsync()
  Try ret = Dialog.SelectFont()
  If Error Then Try ret = Dialog.SelectFont()
  If Error Then Try ret = Dialog.SelectFont()
  sync()
  Return ret
End


Private Sub should_use_kdialog() As Boolean
  Dim kdialog As String
  
  Return False
  
  If Application.Env["XDG_CURRENT_DESKTOP"] = "KDE" Or Lower(Application.Env["DESKTOP_SESSION"]) = "KDE" Then
    If Application.Env["KDE_SESSION_VERSION"] = "4" And Application.Env["KDE_FULL_SESSION"] = "true" Then
      Shell "which kdialog" To kdialog
      kdialog = Trim(kdialog)
      If kdialog <> "" Then Return True
    Endif
  Endif
  Return False
End

Private Function kdialog_askfile(Optional open_dir As Boolean = False) As String
  Dim kdialog_out As String
  Dim kfilter As String
  Dim startpath As String = User.Home
  Dim i As Integer
  If Trim(Dialog.path) <> "" Then startpath = Dialog.path
  If Not open_dir Then
    For i = 0 To filter.max
      If (i Mod 2) = 0 Then
        kfilter &= Replace(filter[i], ";", " ")
    Else
        kfilter &= " |" & filter[i] & "\n"
      Endif
    Next 'i
    kfilter = "'" & kfilter & "*|" & ("All files") & "'"
    Shell "kdialog --getopenfilename " & startpath & " " & kfilter & " --title '" & Dialog.title & "'" To kdialog_out
      Else
    Shell "kdialog --getexistingdirectory " & startpath & " " & " --title '" & Dialog.title & "'" To kdialog_out
  Endif        
  Return Trim(kdialog_out)
End



Public Function OpenFile() As Boolean
  Dim ret As Boolean
  Dim kdialog_out As String
  Getsync()
  If should_use_kdialog() Then
    kdialog_out = kdialog_askfile() 
    ret = (kdialog_out = "")
    If ret Then Return ret
    Dialog.Path = kdialog_out
    Goto returnlabel
  Endif

  Try ret = Dialog.OpenFile()
  If Error Then Try ret = Dialog.OpenFile()
  If Error Then Try ret = Dialog.OpenFile()
  
  returnlabel:
  sync()
  Return ret
End

Public Function SelectDirectory() As Boolean
  Dim ret As Boolean
  Dim kdialog_out As String
  Getsync()
  If should_use_kdialog() Then
    kdialog_out = kdialog_askfile(True) 
    ret = (kdialog_out = "")
    If ret Then Return ret
    Dialog.Path = kdialog_out
    Goto returnlabel
  Endif
  
  Try ret = Dialog.SelectDirectory()
  If Error Then Try ret = Dialog.SelectDirectory()
  If Error Then Try ret = Dialog.SelectDirectory()
  
  returnlabel:
  sync()
  Return ret
End


Public Function SelectDate() As Boolean
  Dim ret As Boolean
  Getsync()
  Try ret = Dialog.SelectDate()
  If Error Then Try ret = Dialog.SelectDate()
  If Error Then Try ret = Dialog.SelectDate()
  sync()
  Return ret
End


